name: CI (nightly)

on:
  schedule:
    - cron: "30 2 * * *"
  workflow_dispatch:

concurrency:
  group: ci-nightly-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  TZ: UTC

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            backend/requirements*.txt
            requirements*.txt
      - name: Install backend deps
        run: |
          python -m pip install -U pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  frontend:
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        working-directory: frontend
        run: npm ci --no-audit --no-fund

      - name: Build
        working-directory: frontend
        run: npm run build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          if-no-files-found: error

  e2e-nightly:
    name: Nightly e2e x2 (same runner)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Init DB & start backend
        env:
          PYTHONPATH: ${{ github.workspace }}
          SQLALCHEMY_DATABASE_URI: sqlite:///nightly.db
        run: |
          python - <<'PY'
          import os
          os.environ.setdefault("SQLALCHEMY_DATABASE_URI", "sqlite:///nightly.db")
          from backend.app import create_app
          from backend.models.models import db
          app = create_app()
          with app.app_context():
              db.create_all()
              print("âœ… nightly DB ready")
          PY
          nohup flask run --host 127.0.0.1 --port 5000 --no-reload > backend.log 2>&1 &
          for i in {1..90}; do
            curl -fsS http://127.0.0.1:5000/api/settings/prices >/dev/null && { echo "Backend is up!"; break; }
            sleep 1
          done

      - uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Serve SPA
        run: |
          PORT=5173
          ROOT="frontend/dist"
          (npx --yes sirv-cli "$ROOT" --single --host 127.0.0.1 --port "$PORT" > vite.log 2>&1 &) || true
          for i in {1..60}; do
            curl -fsS "http://127.0.0.1:${PORT}/" >/dev/null 2>&1 && { echo "Frontend up"; break; }
            sleep 1
          done

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test deps
        working-directory: tests
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ms-playwright-${{ runner.os }}-${{ hashFiles('tests/package-lock.json') }}
          restore-keys: |
            ms-playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        working-directory: tests
        run: npx playwright install --with-deps chromium

      - name: Run e2e twice
        working-directory: tests
        env:
          CI: true
          BACKEND_ORIGIN: http://127.0.0.1:5000
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:5173
        run: |
          set +e
          echo "---- Run #1 ----"
          npx playwright test --reporter=line --workers=1
          R1=$?
          [ -d test-results ] && mv test-results test-results-run1 || true
          [ -d playwright-report ] && mv playwright-report playwright-report-run1 || true

          curl -fsS -X POST http://127.0.0.1:5000/api/settings/prices \
            -H 'content-type: application/json' \
            --data '{"data":{"interest_rate_pct":5,"downpayment_sek":0}}' >/dev/null || true
          curl -fsS -X POST http://127.0.0.1:5000/api/cars/update || true
          curl -fsS "http://127.0.0.1:5000/api/cars?ts=$(date +%s%N)" >/dev/null || true

          echo "---- Run #2 ----"
          npx playwright test --reporter=line --workers=1
          R2=$?

          echo "Run #1 exit=${R1}  Run #2 exit=${R2}"
          if [ "$R1" -ne 0 ] || [ "$R2" -ne 0 ]; then
            exit 1
          fi

      - name: Upload artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-playwright-artifacts
          path: |
            tests/test-results-run1
            tests/test-results-run2
            tests/playwright-report-run1
            tests/playwright-report-run2
            backend.log
            vite.log
          if-no-files-found: ignore
