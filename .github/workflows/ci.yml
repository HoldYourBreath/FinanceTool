name: CI

on:
  push:
  pull_request:

jobs:
  backend:
    name: Backend (lint / deps)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend deps
        run: pip install -r requirements.txt

      - name: Ruff (lint)
        run: |
          pip install ruff
          ruff check backend

      # Add your backend unit tests here if/when you have them
      # - name: Pytests
      #   run: pytest

  frontend:
    name: Frontend (lint / build)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: npm ci

      - name: ESLint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          if-no-files-found: error

  e2e:
    name: E2E (Playwright)
    needs: [backend, frontend]   # <-- waits for both to finish successfully
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Get the built frontend from the 'frontend' job
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      # Install frontend dev deps (Playwright lives here)
      - name: Install frontend dev deps
        working-directory: frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps

      # Serve the built app and wait for it
      - name: Start preview server
        working-directory: frontend
        run: |
          npm run preview -- --port 5173 --strictPort &
          npx --yes wait-on http://127.0.0.1:5173

      # (Optional) start backend if your tests hit the API.
      # Uncomment and adapt FLASK_APP if needed.
      # - name: Start backend
      #   env:
      #     FLASK_APP: backend.app  # or your actual entry point
      #     FLASK_ENV: production
      #   run: |
      #     python -m flask run --host=127.0.0.1 --port=5000 &
      #     npx --yes wait-on http://127.0.0.1:5000

      # Run tests using Playwright installed in frontend/
      # We call the binary from frontend but point it to the root config and tests
      - name: Run Playwright tests
        working-directory: frontend
        run: |
          npx playwright test ../tests/**/*.spec.ts --config ../playwright.config.ts

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
