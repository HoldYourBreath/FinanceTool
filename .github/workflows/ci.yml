name: CI

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - "frontend/**"
      - "tests/**"
      - "playwright.config.*"
      - ".github/workflows/ci.yml"
  pull_request:
    paths:
      - "backend/**"
      - "frontend/**"
      - "tests/**"
      - "playwright.config.*"
      - ".github/workflows/ci.yml"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: backend/requirements*.txt

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install ruff pytest || true

      - name: Ruff (lint)
        run: ruff check .
        continue-on-error: true

      - name: Tests
        run: pytest -q
        continue-on-error: true

  frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Configure npm (retries & no audit/fund)
        run: |
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set prefer-offline true
          npm config set fund false
          npm config set audit false

      - name: Install deps (with retry)
        run: |
          (npm ci || (sleep 10 && npm ci) || (sleep 20 && npm ci))

      - name: Build
        run: npm run build

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      # ---------- Python / backend ----------
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: backend/requirements*.txt

      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Initialize DB (create_all)
        working-directory: backend
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          FLASK_APP: app:create_app
          FLASK_DEBUG: "0"
          SQLALCHEMY_DATABASE_URI: sqlite:///ci.db
          DATABASE_URL: sqlite:///ci.db
        run: |
          python - <<'PY'
          import os
          os.environ.setdefault("SQLALCHEMY_DATABASE_URI", "sqlite:///ci.db")
          from app import create_app
          from models.models import db
          app = create_app()
          with app.app_context():
              db.create_all()
              print("✅ DB ready")
          PY

      - name: Start backend (Flask on 127.0.0.1:5000) and wait
        working-directory: backend
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          FLASK_APP: app:create_app
          FLASK_DEBUG: "0"
          SQLALCHEMY_DATABASE_URI: sqlite:///ci.db
        run: |
          nohup flask run --host 127.0.0.1 --port 5000 --no-reload > ../flask.log 2>&1 &
          for i in {1..120}; do
            if curl -fsS http://127.0.0.1:5000/api/acc_info > /dev/null; then
              echo "Backend is up!"
              break
            fi
            sleep 1
          done
          curl -fsS http://127.0.0.1:5000/api/acc_info > /dev/null || { echo "---- flask.log ----"; tail -n +1 ../flask.log || true; exit 1; }

      # ---------- Node / frontend (for running app during tests) ----------
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Configure npm (retries & no audit/fund)
        run: |
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set prefer-offline true
          npm config set fund false
          npm config set audit false

      - name: Install frontend deps (with retry)
        working-directory: frontend
        run: |
          (npm ci || (sleep 10 && npm ci) || (sleep 20 && npm ci))

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Start frontend preview and wait
        working-directory: frontend
        run: |
          nohup npm run preview -- --host 127.0.0.1 --port 5173 > ../vite.log 2>&1 &
          for i in {1..60}; do
            if curl -fsS http://127.0.0.1:5173/ > /dev/null; then
              echo "Frontend is up!"
              break
            fi
            sleep 1
          done
          curl -fsS http://127.0.0.1:5173/ > /dev/null || { echo "---- vite.log ----"; tail -n +1 ../vite.log || true; exit 1; }

      # ---------- Playwright ----------
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: tests/package-lock.json

      - name: Configure npm for tests (retries & no audit/fund)
        working-directory: tests
        run: |
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set prefer-offline true
          npm config set fund false
          npm config set audit false

      - name: Install test deps (lockfile-aware with fallback)
        working-directory: tests
        run: |
          # be gentle to registry + retries
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set prefer-offline true
          npm config set fund false
          npm config set audit false

          if [ -f package-lock.json ]; then
            # Try clean install. If lockfile is out of sync (EUSAGE), fall back to npm install.
            npm ci --no-audit --no-fund || {
              echo "npm ci failed (likely lockfile mismatch). Falling back to npm install…"
              rm -rf node_modules
              npm install --no-audit --no-fund
            }
          else
            npm install --no-audit --no-fund
          fi

      # Install browsers & OS deps with caching, avoids npm 429 on playwright-core tgz fetch
      - name: Setup Playwright
        uses: microsoft/playwright-github-action@v1
        with:
          version: 1.48.2

      - name: Playwright version
        working-directory: tests
        run: npx playwright --version

      - name: Sanity check list tests
        working-directory: tests
        env:
          CI: true
          API_URL: http://127.0.0.1:5000
          WEB_URL: http://127.0.0.1:5173/
        run: npx --no-install playwright test --list --config=playwright.config.ts

      - name: Run Playwright tests (Chromium)
        working-directory: tests
        env:
          CI: true
          API_URL: http://127.0.0.1:5000
          WEB_URL: http://127.0.0.1:5173/
        run: npx --no-install playwright test --project=chromium --config=playwright.config.ts

      - name: Upload Playwright report on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: tests/playwright-report
          if-no-files-found: ignore

      - name: Dump server logs on failure
        if: failure()
        run: |
          echo "---- flask.log ----"
          tail -n +1 backend/flask.log || true
          echo "---- vite.log ----"
          tail -n +1 frontend/vite.log || true
