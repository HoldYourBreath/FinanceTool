name: CI

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/ci.yml"
  pull_request:
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/ci.yml"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: backend/requirements*.txt

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install ruff pytest || true

      - name: Ruff (lint)
        run: ruff check .
        continue-on-error: true

      - name: Tests
        run: pytest -q
        continue-on-error: true

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install (npm ci)
        run: npm ci

      - name: Lint
        run: npm run lint --if-present
        continue-on-error: true

      # (Optional) add unit tests for the frontend if you have them:
      # - name: Frontend unit tests
      #   run: npm test --if-present -- --ci

  e2e:
    name: E2E (Playwright)
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: |
          # Fail loudly if no build script
          if ! jq -re '.scripts.build' package.json >/dev/null; then
            echo '❌ No "build" script in frontend/package.json' >&2
            exit 1
          fi
          npm run build
          echo "---- after build ----"
          ls -la || true
          ls -la dist || true
          ls -la build || true

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps

      # Serve production build:
      # - Vite: use `npm run preview` (serves dist)
      # - CRA: use `serve -s build`
      - name: Start preview server
        working-directory: frontend
        run: |
          if [ -d dist ]; then
            npm run preview -- --port 5173 --strictPort &
          elif [ -d build ]; then
            npx --yes serve -s build -l 5173 &
          else
            echo "❌ No dist/ or build/ directory found to serve" >&2
            exit 1
          fi
          npx --yes wait-on http://127.0.0.1:5173

      # Uncomment if your E2E tests call the API
      # - name: Start backend
      #   env:
      #     FLASK_APP: backend.app
      #     FLASK_ENV: production
      #   run: |
      #     python -m flask run --host=127.0.0.1 --port=5000 &
      #     npx --yes wait-on http://127.0.0.1:5000

      - name: Run Playwright tests
        working-directory: frontend
        env:
          CI: true
        run: npx playwright test ../tests/**/*.spec.ts --config ../playwright.config.ts

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
