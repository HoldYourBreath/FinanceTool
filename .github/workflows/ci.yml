name: CI

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - "frontend/**"
      - "tests/**"
      - "package-lock.json"
      - "frontend/package-lock.json"
      - "playwright.config.*"
      - ".github/workflows/ci.yml"
  pull_request:
    paths:
      - "backend/**"
      - "frontend/**"
      - "tests/**"
      - "package-lock.json"
      - "frontend/package-lock.json"
      - "playwright.config.*"
      - ".github/workflows/ci.yml"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            backend/requirements*.txt
            requirements*.txt
      - name: Install backend deps
        run: |
          python -m pip install -U pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov hypothesis
      - name: Run pytest (backend)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q backend/tests --maxfail=1 --disable-warnings

  frontend:
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      # Re-resolve lockfile for Linux (KEEP optional deps so rollup/lightningcss binaries install)
      - name: Normalize lockfile (frontend)
        working-directory: frontend
        run: npm i --package-lock-only
      - name: Install deps (frontend)
        working-directory: frontend
        run: |
          npm ci --no-audit --no-fund || {
            echo "Lockfile out of sync. Regenerating…"
            npm install --package-lock-only --no-audit --no-fund
            npm ci --no-audit --no-fund
          }
      - name: Build (frontend)
        working-directory: frontend
        run: npm run build
      - name: Upload built app
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          if-no-files-found: error

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      # ---------- Python / backend ----------
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            backend/requirements*.txt
            requirements*.txt
      - name: Install backend deps
        run: |
          python -m pip install -U pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Sanity check imports
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'PY'
          import importlib, sys
          print("PYTHONPATH[0]:", sys.path[0])
          importlib.import_module("backend.app")
          importlib.import_module("backend.routes")
          importlib.import_module("backend.utils.energy")
          print("✅ backend imports OK")
          PY
      - name: Initialize DB (if needed)
        env:
          PYTHONPATH: ${{ github.workspace }}
          SQLALCHEMY_DATABASE_URI: sqlite:///ci.db
          DATABASE_URL: sqlite:///ci.db
        run: |
          python - <<'PY'
          import os
          os.environ.setdefault("SQLALCHEMY_DATABASE_URI", "sqlite:///ci.db")
          from backend.app import create_app
          from backend.models.models import db
          app = create_app()
          with app.app_context():
              db.create_all()
              print("✅ DB ready")
          PY
      - name: Start backend (Flask) and wait
        env:
          PYTHONPATH: ${{ github.workspace }}
          FLASK_APP: backend.app:create_app
          FLASK_DEBUG: "0"
          SQLALCHEMY_DATABASE_URI: sqlite:///ci.db
        run: |
          nohup flask run --host 127.0.0.1 --port 5000 --no-reload > backend.log 2>&1 &
          for i in {1..90}; do
            if curl -fsS http://127.0.0.1:5000/api/settings/prices >/dev/null; then
              echo "Backend is up!"; break; fi
            sleep 1
          done
          curl -fsS http://127.0.0.1:5000/api/settings/prices >/dev/null || { echo "---- backend.log ----"; tail -n +1 backend.log || true; exit 1; }

      # ---------- Serve the built frontend (no install in e2e) ----------
      - name: Download built app
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
      - name: Serve static build (SPA)
        run: |
          npx --yes http-server frontend/dist -p 5173 --silent --cors --spa > vite.log 2>&1 &
          for i in {1..60}; do
            if curl -fsS http://127.0.0.1:5173/ >/dev/null; then
              echo "Frontend is up!"; break; fi
            sleep 1
          done
          curl -fsS http://127.0.0.1:5173/ >/dev/null || { echo "---- vite.log ----"; tail -n +1 vite.log || true; exit 1; }

      # ---------- Playwright ----------
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: tests/package-lock.json
      - name: Install test deps
        working-directory: tests
        run: npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ms-playwright-${{ runner.os }}-${{ hashFiles('tests/package-lock.json') }}
          restore-keys: |
            ms-playwright-${{ runner.os }}-
      - name: Install Playwright browsers
        working-directory: tests
        run: npx playwright install --with-deps chromium
      - name: Run Playwright tests
        working-directory: tests
        env:
          CI: true
          API_URL: http://127.0.0.1:5000
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:5173
        run: npx playwright test --reporter=line

      - name: Upload logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: |
            backend.log
            vite.log
          if-no-files-found: ignore

      - name: Upload Playwright report (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report
            tests/playwright-report
          if-no-files-found: ignore
