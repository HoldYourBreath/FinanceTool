name: CI

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - "frontend/**"
      - "tests/**"
      - "playwright.config.*"
      - ".github/workflows/ci.yml"
  pull_request:
    paths:
      - "backend/**"
      - "frontend/**"
      - "tests/**"
      - "playwright.config.*"
      - ".github/workflows/ci.yml"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: backend/requirements*.txt

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install ruff pytest || true

      - name: Ruff (lint)
        run: ruff check .
        continue-on-error: true

      - name: Tests
        run: pytest -q
        continue-on-error: true

  frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [backend, frontend]   # <-- forces this to run AFTER those jobs complete
    steps:
      - uses: actions/checkout@v4

      # ---------- Python / backend ----------
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: backend/requirements*.txt

      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Initialize DB (create_all)
        working-directory: backend
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          FLASK_APP: app:create_app
          FLASK_DEBUG: "0"
          SQLALCHEMY_DATABASE_URI: sqlite:///ci.db
          DATABASE_URL: sqlite:///ci.db
        run: |
          python - <<'PY'
          import os
          # Fallback to sqlite if the runner env is missing
          os.environ.setdefault("SQLALCHEMY_DATABASE_URI", "sqlite:///ci.db")

          from app import create_app
          from models.models import db

          app = create_app()  # make sure create_app reads env or sets defaults
          with app.app_context():
              db.create_all()
              print("âœ… DB ready")
          PY

      - name: Start backend (Flask on 127.0.0.1:5000) and wait
        working-directory: backend
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          # Use the exact target your project exposes. If you have an app factory:
          #   app:create_app
          # If you expose a WSGI app object called "app":
          #   app:app
          FLASK_APP: app:create_app
          FLASK_DEBUG: "0"
          SQLALCHEMY_DATABASE_URI: sqlite:///ci.db
        run: |
          nohup flask run --host 127.0.0.1 --port 5000 --no-reload > ../flask.log 2>&1 &
          for i in {1..120}; do
            if curl -fsS http://127.0.0.1:5000/api/acc_info > /dev/null; then
              echo "Backend is up!"
              break
            fi
            sleep 1
          done
          # If still not up, dump logs and fail
          curl -fsS http://127.0.0.1:5000/api/acc_info > /dev/null || { echo "---- flask.log ----"; tail -n +1 ../flask.log || true; exit 1; }

      # ---------- Node / frontend ----------
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Start frontend preview and wait
        working-directory: frontend
        run: |
          nohup npm run preview -- --host 127.0.0.1 --port 5173 > ../vite.log 2>&1 &
          for i in {1..60}; do
            if curl -fsS http://127.0.0.1:5173/ > /dev/null; then
              echo "Frontend is up!"
              break
            fi
            sleep 1
          done
          curl -fsS http://127.0.0.1:5173/ > /dev/null || { echo "---- vite.log ----"; tail -n +1 ../vite.log || true; exit 1; }

      # ---------- Playwright ----------
      - name: Install Playwright (CLI+Chromium)
        run: npx -y playwright@1.48.2 install --with-deps chromium

      - name: Run Playwright tests
        env:
          CI: true
          API_URL: http://127.0.0.1:5000
          WEB_URL: http://127.0.0.1:5173
        run: npx -y playwright@1.48.2 test --project=chromium --config=./tests/playwright.config.ts

      - name: Upload Playwright report on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: ignore

      - name: Dump server logs on failure
        if: failure()
        run: |
          echo "---- flask.log ----"
          tail -n +1 backend/flask.log || true
          echo "---- vite.log ----"
          tail -n +1 frontend/vite.log || true
