name: CI (core)

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - "frontend/**"
      - "tests/**"
      - "package-lock.json"
      - "frontend/package-lock.json"
      - "playwright.config.*"
      - ".pre-commit-config.y*ml"
      - "lighthouserc.*"
      - ".github/workflows/ci-core.yml"
  pull_request:
    paths:
      - "backend/**"
      - "frontend/**"
      - "tests/**"
      - "package-lock.json"
      - "frontend/package-lock.json"
      - "playwright.config.*"
      - ".pre-commit-config.y*ml"
      - "lighthouserc.*"
      - ".github/workflows/ci-core.yml"

concurrency:
  group: ci-core-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  TZ: UTC

jobs:
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend deps (for hooks)
        working-directory: frontend
        run: npm ci --no-audit --no-fund

      - name: Run pre-commit
        run: |
          python -m pip install -U pip pre-commit
          pre-commit --version
          pre-commit install-hooks
          pre-commit run --all-files

  frontend-lint:
    name: Frontend lint & typecheck
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Make CI scripts executable
        run: chmod +x scripts/ci/*.sh

      - name: Install deps (frontend)
        run: bash scripts/ci/install_frontend.sh frontend

      - name: ESLint (strict)
        working-directory: frontend
        run: npx --yes eslint "src/**/*.{js,jsx,ts,tsx}" --max-warnings=0

      - name: Prettier (check)
        working-directory: frontend
        run: npx --yes prettier --check .

      - name: TypeScript (noEmit)
        working-directory: frontend
        run: |
          if [ -f tsconfig.json ]; then
            npx --yes tsc --noEmit
          else
            echo "No tsconfig.json; skipping tsc."
          fi

  workflows-lint:
    name: Lint workflows (actionlint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install shellcheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Install actionlint
        run: |
          mkdir -p "$HOME/.local/bin"
          curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash \
            | bash -s -- latest "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          actionlint -version

      - name: Lint workflows
        run: actionlint -color

  backend:
    name: Backend unit tests
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            backend/requirements*.txt
            requirements*.txt

      - name: Install backend deps
        run: |
          python -m pip install -U pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov hypothesis

      - name: Run pytest
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest backend/tests --maxfail=1 --disable-warnings

  frontend:
    name: Frontend build
    runs-on: ubuntu-latest
    needs: [backend, frontend-lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Normalize lockfile
        working-directory: frontend
        run: npm i --package-lock-only

      - name: Ensure exec bit
        run: chmod +x scripts/ci/*.sh

      - name: Install deps (frontend)
        run: bash scripts/ci/install_frontend.sh frontend

      - name: Build
        working-directory: frontend
        run: npm run build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          if-no-files-found: error

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend-dist

      - name: Run Lighthouse (staticDistDir)
        env:
            LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
        run: bash scripts/ci/run_lhci.sh frontend-dist

  e2e:
    name: E2E (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            backend/requirements*.txt
            requirements*.txt

      - name: Install backend deps
        run: |
          python -m pip install -U pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Init DB
        env:
          PYTHONPATH: ${{ github.workspace }}
          SQLALCHEMY_DATABASE_URI: sqlite:///ci.db
          DATABASE_URL: sqlite:///ci.db
        run: python scripts/ci/init_db.py

      - name: Start backend & wait
        env:
          PYTHONPATH: ${{ github.workspace }}
          FLASK_APP: backend.app:create_app
          FLASK_DEBUG: "0"
          SQLALCHEMY_DATABASE_URI: sqlite:///ci.db
        run: scripts/ci/start_backend.sh 5000 http://127.0.0.1:5000/api/health

      - name: Stabilize pricing + warm caches
        run: scripts/ci/warm_backend.sh http://127.0.0.1:5000

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend-dist

      - name: Serve SPA
        run: scripts/ci/serve_spa.sh frontend-dist 5173

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test deps
        working-directory: tests
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ms-playwright-${{ runner.os }}-${{ hashFiles('tests/package-lock.json') }}
          restore-keys: |
            ms-playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        working-directory: tests
        run: npx playwright install --with-deps chromium

      - name: Run tests
        working-directory: tests
        env:
          CI: true
          BACKEND_ORIGIN: http://127.0.0.1:5000
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:5173
        run: npx playwright test --reporter=line --workers=1

      - name: Upload logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: |
            backend.log
            vite.log
          if-no-files-found: ignore

      - name: Upload Playwright report (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report
            tests/playwright-report
          if-no-files-found: ignore
