name: CI (core)

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - "frontend/**"
      - "tests/**"
      - "package-lock.json"
      - "frontend/package-lock.json"
      - "playwright.config.*"
      - ".pre-commit-config.y*ml"
      - "lighthouserc.*"
      - ".github/workflows/ci-core.yml"
  pull_request:
    paths:
      - "backend/**"
      - "frontend/**"
      - "tests/**"
      - "package-lock.json"
      - "frontend/package-lock.json"
      - "playwright.config.*"
      - ".pre-commit-config.y*ml"
      - "lighthouserc.*"
      - ".github/workflows/ci-core.yml"

concurrency:
  group: ci-core-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  TZ: UTC

jobs:
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend deps (for hooks)
        working-directory: frontend
        run: |
          if [ -f package.json ]; then
            npm ci --no-audit --no-fund
          fi

      - name: Run pre-commit
        run: |
          set -euo pipefail
          python -m pip install -U pip pre-commit
          pre-commit --version
          pre-commit install-hooks
          pre-commit run --all-files

  frontend-lint:
    name: Frontend lint & typecheck
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        working-directory: frontend
        run: npm ci --no-audit --no-fund

      - name: ESLint (strict)
        working-directory: frontend
        run: npx --yes eslint "src/**/*.{js,jsx,ts,tsx}" --max-warnings=0

      - name: Prettier (check)
        working-directory: frontend
        run: npx --yes prettier --check .

      - name: TypeScript (noEmit)
        working-directory: frontend
        run: |
          if [ -f tsconfig.json ]; then
            npx --yes tsc --noEmit
          else
            echo "No tsconfig.json; skipping tsc."
          fi

  backend:
    name: Backend unit tests
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            backend/requirements*.txt
            requirements*.txt

      - name: Install backend deps
        run: |
          python -m pip install -U pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov hypothesis

      - name: Run pytest
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest backend/tests --maxfail=1 --disable-warnings

  frontend:
    name: Frontend build
    runs-on: ubuntu-latest
    needs: [backend, frontend-lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Normalize lockfile
        working-directory: frontend
        run: npm i --package-lock-only

      - name: Install deps
        working-directory: frontend
        run: |
          set -e
          npm ci --no-audit --no-fund || {
            echo "Lockfile out of sync → regenerating…"
            rm -f package-lock.json
            npm install --package-lock-only --no-audit --no-fund
            npm ci --no-audit --no-fund || {
              echo "Fallback to npm install (non-strict)"
              rm -rf node_modules
              npm install --no-audit --no-fund
            }
          }

      - name: Build
        working-directory: frontend
        run: npm run build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          if-no-files-found: error

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Run Lighthouse (staticDistDir)
        env:
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
        run: |
          npx --yes @lhci/cli autorun \
            --collect.staticDistDir=frontend/dist \
            --upload.target=temporary-public-storage \
            --config=./lighthouserc.json || echo "LHCI non-zero exit tolerated"

  e2e:
    name: E2E (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            backend/requirements*.txt
            requirements*.txt

      - name: Install backend deps
        run: |
          python -m pip install -U pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Init DB
        env:
          PYTHONPATH: ${{ github.workspace }}
          SQLALCHEMY_DATABASE_URI: sqlite:///ci.db
          DATABASE_URL: sqlite:///ci.db
        run: |
          python - <<'PY'
          import os
          os.environ.setdefault("SQLALCHEMY_DATABASE_URI", "sqlite:///ci.db")
          from backend.app import create_app
          from backend.models.models import db
          app = create_app()
          with app.app_context():
              db.create_all()
              print("✅ DB ready")
          PY

      - name: Start backend & wait
        env:
          PYTHONPATH: ${{ github.workspace }}
          FLASK_APP: backend.app:create_app
          FLASK_DEBUG: "0"
          SQLALCHEMY_DATABASE_URI: sqlite:///ci.db
        run: |
          nohup flask run --host 127.0.0.1 --port 5000 --no-reload > backend.log 2>&1 &
          for i in {1..90}; do
            curl -fsS http://127.0.0.1:5000/api/health >/dev/null && { echo "Backend is up!"; break; }
            sleep 1
          done
          curl -fsS http://127.0.0.1:5000/api/health >/dev/null || { echo "---- backend.log ----"; tail -n +1 backend.log || true; exit 1; }

      - name: Stabilize pricing + warm caches
        run: |
          set -euo pipefail
          base='http://127.0.0.1:5000'
          curl -fsS -X POST "$base/api/settings/prices" -H 'content-type: application/json' --data '{"data":{"interest_rate_pct":5,"downpayment_sek":0}}' >/dev/null
          for i in {1..50}; do
            got=$(curl -fsS "$base/api/settings/prices" | tr -d ' \n\r\t')
            echo "prices: $got"
            if echo "$got" | grep -q '"interest_rate_pct":5' && echo "$got" | grep -q '"downpayment_sek":0'; then
              break
            fi
            sleep 0.1
          done
          curl -fsS -X POST "$base/api/cars/update" || true
          curl -fsS "$base/api/cars?ts=$(date +%s%N)" >/dev/null

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Serve SPA
        run: |
          set -euo pipefail
          PORT=5173
          ROOT="frontend/dist"
          (npx --yes sirv-cli "$ROOT" --single --host 127.0.0.1 --port "$PORT" > vite.log 2>&1 &) || true
          for i in {1..60}; do
            curl -fsS "http://127.0.0.1:${PORT}/" >/dev/null 2>&1 && { echo "Frontend is up"; break; }
            sleep 1
          done
          curl -fsS "http://127.0.0.1:${PORT}/" >/dev/null 2>&1 || { echo "---- vite.log ----"; cat vite.log || true; exit 1; }

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test deps
        working-directory: tests
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ms-playwright-${{ runner.os }}-${{ hashFiles('tests/package-lock.json') }}
          restore-keys: |
            ms-playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        working-directory: tests
        run: npx playwright install --with-deps chromium

      - name: Run tests
        working-directory: tests
        env:
          CI: true
          BACKEND_ORIGIN: http://127.0.0.1:5000
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:5173
        run: npx playwright test --reporter=line --workers=1

      - name: Upload logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: |
            backend.log
            vite.log
          if-no-files-found: ignore

      - name: Upload Playwright report (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report
            tests/playwright-report
          if-no-files-found: ignore
